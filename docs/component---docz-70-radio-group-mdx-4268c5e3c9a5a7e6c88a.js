(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"3kzx":function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return o})),n.d(e,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS"),l=n("oXiK"),i=n("ZFoC");n("aD51");function b(){return(b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docz/70.radioGroup.mdx"}});var p={_frontmatter:o},d=r.a;function c(t){var e=t.components,n=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,["components"]);return Object(a.b)(d,b({},p,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"radiogroup"},"RadioGroup"),Object(a.b)("p",null,"This component has to be a child within the ",Object(a.b)("inlineCode",{parentName:"p"},"<Form />")," component. This component must have ",Object(a.b)("inlineCode",{parentName:"p"},"<input />"),' components with the type="radio" as children. These children components must have a name prop which has to match the parents id. The id of the children will be the value of the ',Object(a.b)("inlineCode",{parentName:"p"},"<RadioGroup />")," component when clicked."),Object(a.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-jsx"}),"import {\n  Form,\n  RadioGroup,\n} from 'react-form-package';\n")),Object(a.b)("p",null,"Render a ",Object(a.b)("inlineCode",{parentName:"p"},"<Form />")," with a ",Object(a.b)("inlineCode",{parentName:"p"},"<RadioGroup />")," and a ",Object(a.b)("inlineCode",{parentName:"p"},"<Button />")," component."),Object(a.b)(i.c,{__position:0,__code:'<Form>\n  <div>\n    <div>Choose an option</div>\n    <RadioGroup type="radio" id="option">\n      <div>\n        <div>option 1</div>\n        <input type="radio" name="option" id="option1" />\n      </div>\n      <div>\n        <div>option 2</div>\n        <input type="radio" name="option" id="option2" />\n      </div>\n      <div>\n        <div>option 3</div>\n        <input type="radio" name="option" id="option3" />\n      </div>\n    </RadioGroup>\n    <div>\n      <Button\n        id="submit"\n        type="submit"\n        onClick={state => {\n          alert(JSON.stringify(state, null, 2))\n          alert(\'open the console to see the whole state...\')\n          console.log(state)\n        }}\n      >\n        Submit\n      </Button>\n    </div>\n  </div>\n</Form>',__scope:{props:n,DefaultLayout:r.a,Form:l.d,RadioGroup:l.e,Button:l.a,Playground:i.c},mdxType:"Playground"},Object(a.b)(l.d,{mdxType:"Form"},Object(a.b)("div",null,Object(a.b)("div",null,"Choose an option"),Object(a.b)(l.e,{type:"radio",id:"option",mdxType:"RadioGroup"},Object(a.b)("div",null,Object(a.b)("div",null,"option 1"),Object(a.b)("input",{type:"radio",name:"option",id:"option1"})),Object(a.b)("div",null,Object(a.b)("div",null,"option 2"),Object(a.b)("input",{type:"radio",name:"option",id:"option2"})),Object(a.b)("div",null,Object(a.b)("div",null,"option 3"),Object(a.b)("input",{type:"radio",name:"option",id:"option3"}))),Object(a.b)("div",null,Object(a.b)(l.a,{id:"submit",type:"submit",onClick:function(t){alert(JSON.stringify(t,null,2)),alert("open the console to see the whole state..."),console.log(t)},mdxType:"Button"},"Submit"))))),Object(a.b)("h2",{id:"props"},"Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",b({parentName:"tr"},{align:null}),"Property "),Object(a.b)("th",b({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",b({parentName:"tr"},{align:null}),"Required"),Object(a.b)("th",b({parentName:"tr"},{align:null}),"Default"),Object(a.b)("th",b({parentName:"tr"},{align:null}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"id "),Object(a.b)("td",b({parentName:"tr"},{align:null}),"String"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"true"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"type"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"String"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"true"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"radio"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"required"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Bool"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null}))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"preOnChange"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Func "),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false "),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),"manipulate the state before its validated (see ",Object(a.b)("a",b({parentName:"td"},{href:"/react-form-package/state-manipulation"}),"State Manipulation"),")")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"errorMessage"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"String"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),"define your own custom error message for the input")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"onFocus"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Func"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),"get access to the state of the form when the user focus on the input")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"onChange"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Func"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),"get access to the state of the form when the user changes the input")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"onBlur"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Func"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),"get access to the state of the form when the user blurs the input")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"bintTo"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"String, Array"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})," "),Object(a.b)("td",b({parentName:"tr"},{align:null})," only needed for ",Object(a.b)("a",b({parentName:"td"},{href:"/react-form-package/bind-input-fields"}),"binding input fields"),". The id/ids of the input/inputs you want to manipulate")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"bintToAllways"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Bool"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})," "),Object(a.b)("td",b({parentName:"tr"},{align:null})," only needed for ",Object(a.b)("a",b({parentName:"td"},{href:"/react-form-package/bind-input-fields-2"}),"binding input fields"),". Only needed if you want that the bindToCallback is triggered even the bound input field was already touched (blurred)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),"bindToCallback"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"Func"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",b({parentName:"tr"},{align:null})),Object(a.b)("td",b({parentName:"tr"},{align:null}),"only needed for ",Object(a.b)("a",b({parentName:"td"},{href:"/react-form-package/bind-input-fields"}),"binding input fields"),". The callback to set the target's (",Object(a.b)("inlineCode",{parentName:"td"},"bindTo"),") input value, which gets called ",Object(a.b)("inlineCode",{parentName:"td"},"onChange")," (return a single value or an array of values)")))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docz/70.radioGroup.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docz-70-radio-group-mdx-4268c5e3c9a5a7e6c88a.js.map