(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{Ko6T:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return s}));t("5hJT"),t("W1QL"),t("K/PF"),t("75LO"),t("PJhk"),t("4aJ6"),t("t91x"),t("asZ9"),t("oMRA"),t("6d4m"),t("mXGw");var a=t("/FXl"),l=t("TjRS"),i=t("oXiK"),o=t("ZFoC");t("aD51");function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docz/190.bindInputFields.mdx"}});var u={_frontmatter:b},d=l.a;function s(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(a.b)(d,r({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"bind-input-fields"},"Bind Input Fields"),Object(a.b)("p",null,"Sometimes a input value depends on another input value, e.g. the use inputs a range of house numbers and you have to calculate the dependend household count. So that the user is able to skip some fields but is also able to chnage the value if the user knows it better."),Object(a.b)("h2",{id:"bind-an-input-value-to-another-input-value"},"Bind an input value to another input value"),Object(a.b)("p",null,"To handle such cases there are two properties available on the ",Object(a.b)("inlineCode",{parentName:"p"},"<Field />"),", the ",Object(a.b)("inlineCode",{parentName:"p"},"<RadioGroup />"),", and the ",Object(a.b)("inlineCode",{parentName:"p"},"<Select />")," component."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:null}),"Property"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"Required"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"Default"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"bindTo"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"String"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",r({parentName:"tr"},{align:null})),Object(a.b)("td",r({parentName:"tr"},{align:null}),"the ",Object(a.b)("inlineCode",{parentName:"td"},"id")," of the field you want to manipulate")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"bindToCallback"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"Func"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"false"),Object(a.b)("td",r({parentName:"tr"},{align:null})),Object(a.b)("td",r({parentName:"tr"},{align:null}),"the callback to set the target's (",Object(a.b)("inlineCode",{parentName:"td"},"bindTo"),") input value, which gets called ",Object(a.b)("inlineCode",{parentName:"td"},"onChange"))))),Object(a.b)("h3",{id:"basic-usage"},"Basic Usage"),Object(a.b)("p",null,"In our example we bind our first ",Object(a.b)("inlineCode",{parentName:"p"},"housenumbers")," input to the second ",Object(a.b)("inlineCode",{parentName:"p"},"households")," input. As long as the bound input field (",Object(a.b)("inlineCode",{parentName:"p"},"bindTo"),", in our example the households field) is untouched (not blurred) the ",Object(a.b)("inlineCode",{parentName:"p"},"binToCallback")," will be executed ",Object(a.b)("inlineCode",{parentName:"p"},"onChange")," of the field where we have the ",Object(a.b)("inlineCode",{parentName:"p"},"bindTo")," and ",Object(a.b)("inlineCode",{parentName:"p"},"bindToCallback")," properties. The ",Object(a.b)("inlineCode",{parentName:"p"},"bindToCallback")," expects a String as return value, and gets the input value of the current input field ",Object(a.b)("inlineCode",{parentName:"p"},"housenumbers"),"."),Object(a.b)(o.c,{__position:0,__code:'<Form>\n  <div>\n    <div>House numbers:</div>\n\n    <Field\n      id="housenumbers"\n      type="text"\n      placeholder="2-7"\n      // bind this field to field with id `households`\n      bindTo="households"\n      // when this field changes set the value of the\n      // bound field (`households`) to the result of\n      // this function, either a string or a boolean\n      bindToCallback={value => {\n        const numbers = value.includes(\'-\') ? value.split(\'-\') : value\n\n        if (!Array.isArray(numbers)) {\n          return \'1\'\n        }\n\n        const number1 = parseInt(numbers[0])\n        const number2 = parseInt(numbers[1])\n\n        if (!number2 || number2 === number1) {\n          return \'1\'\n        }\n\n        if (number2 < number1) {\n          return \'0\'\n        }\n\n        const households = (number2 - number1 + 1).toString()\n\n        return households\n      }}\n    />\n  </div>\n\n  <div>\n    <div>Households:</div>\n\n    <Field id="households" type="number" placeholder="6" />\n  </div>\n\n  <div>\n    <Button\n      id="submit"\n      type="submit"\n      onClick={state => {\n        alert(JSON.stringify(state, null, 2))\n        alert(\'open the console to see the whole state...\')\n        console.log(state)\n      }}\n    >\n      Submit\n    </Button>\n  </div>\n</Form>',__scope:{props:t,DefaultLayout:l.a,Form:i.d,Field:i.b,Button:i.a,Playground:o.c},mdxType:"Playground"},Object(a.b)(i.d,{mdxType:"Form"},Object(a.b)("div",null,Object(a.b)("div",null,"House numbers:"),Object(a.b)(i.b,{id:"housenumbers",type:"text",placeholder:"2-7",bindTo:"households",bindToCallback:function(e){var n=e.includes("-")?e.split("-"):e;if(!Array.isArray(n))return"1";var t=parseInt(n[0]),a=parseInt(n[1]);return a&&a!==t?a<t?"0":(a-t+1).toString():"1"},mdxType:"Field"})),Object(a.b)("div",null,Object(a.b)("div",null,"Households:"),Object(a.b)(i.b,{id:"households",type:"number",placeholder:"6",mdxType:"Field"})),Object(a.b)("div",null,Object(a.b)(i.a,{id:"submit",type:"submit",onClick:function(e){alert(JSON.stringify(e,null,2)),alert("open the console to see the whole state..."),console.log(e)},mdxType:"Button"},"Submit")))))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docz/190.bindInputFields.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docz-190-bind-input-fields-mdx-0a4ef2bdd18c695ccaf9.js.map