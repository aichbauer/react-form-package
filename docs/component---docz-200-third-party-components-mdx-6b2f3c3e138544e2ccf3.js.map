{"version":3,"sources":["webpack:///../docz/200.thirdPartyComponents.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Field","FieldWrapper","Select","RadioGroup","Button","Downshift","Playground","Autocomplete","validate","type","id","required","onClick","state","alert","JSON","stringify","console","log","isMDXComponent"],"mappings":"miBAUO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,0BADR,0BAGA,8BACE,iBAAGC,WAAW,cAAd,wCAEF,sJAAqI,0BAAYA,WAAW,KAAvB,sBAArI,yGAA6S,0BAAYA,WAAW,KAAvB,sBAA7S,oCACA,6FAA4E,mBAAGA,WAAW,KAAQ,CAC9F,KAAQ,+CADgE,aAA5E,KAGA,qBAAG,0BAAYA,WAAW,KAAvB,sBAAH,UAA4E,0BAAYA,WAAW,KAAvB,oBAA5E,yEAAkN,0BAAYA,WAAW,KAAvB,WAAlN,KAA2Q,0BAAYA,WAAW,KAAvB,UAA3Q,KAAmU,0BAAYA,WAAW,KAAvB,YAAnU,QAAgY,0BAAYA,WAAW,KAAvB,QAAhY,KACA,kFAAiE,0BAAYA,WAAW,KAAvB,SAAjE,uBAA0I,0BAAYA,WAAW,KAAvB,UAA1I,0BAAuN,0BAAYA,WAAW,KAAvB,WAAvN,oBACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,2DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gJASL,qDAAoC,0BAAYA,WAAW,KAAvB,gBAApC,eACA,6DAA4C,mBAAGA,WAAW,KAAQ,CAC9D,KAAQ,+CADgC,aAA5C,mBAGA,qFAAoE,0BAAYA,WAAW,KAAvB,YAApE,wBAAiJ,0BAAYA,WAAW,KAAvB,YAAjJ,oBAA0N,0BAAYA,WAAW,KAAvB,iBAA1N,sBAA0S,0BAAYA,WAAW,KAAvB,WAA1S,QAAsW,0BAAYA,WAAW,KAAvB,UAAtW,4CAAqc,0BAAYA,WAAW,KAAvB,QAArc,qBAA2gB,0BAAYA,WAAW,KAAvB,mBAA3gB,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,u5DAsEL,sFAAqE,0BAAYA,WAAW,KAAvB,oBAArE,yBAA2J,0BAAYA,WAAW,KAAvB,YAA3J,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8JAUL,4YACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8ZAAqaC,QAAS,CAC/cL,QACAH,kBACAS,SACAC,UACAC,iBACAC,WACAC,eACAC,WACAC,cACAC,eACAC,kBACCb,QAAQ,cACb,YAAC,IAAD,CAAMc,UAAQ,EAACd,QAAQ,QACrB,uBACA,YAAC,IAAD,CAAce,KAAK,OAAOC,GAAG,eAAeC,UAAQ,EAACjB,QAAQ,gBAC3D,YAAC,IAAD,CAAcA,QAAQ,mBAGxB,uBACE,YAAC,IAAD,CAAQe,KAAK,SAASG,QAAS,SAAAC,GACzBC,MAAMC,KAAKC,UAAUH,EAAO,KAAM,IAClCC,MAAM,8CACNG,QAAQC,IAAIL,IACXnB,QAAQ,UAJf,c,0MAcNH,EAAW4B,gBAAiB","file":"component---docz-200-third-party-components-mdx-6b2f3c3e138544e2ccf3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Field, FieldWrapper, Select, RadioGroup, Button } from '../src';\nimport Downshift from 'downshift';\nimport { Playground } from 'docz';\nimport { Autocomplete } from './components/Autocomplete';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"third-party-components\"\n    }}>{`Third Party Components`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Working with third party components`}</p>\n    </blockquote>\n    <p>{`Sometimes you need to work with third party components to make something work properly, e.g. you need an autocompletion. This `}<inlineCode parentName=\"p\">{`react-form-package`}</inlineCode>{` does not provide an autocompletion by default, but luckily you can use third party components within `}<inlineCode parentName=\"p\">{`react-form-package`}</inlineCode>{` and keep all the functionality.`}</p>\n    <p>{`To give you an example of how to create a autocompletion form we use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/paypal/downshift#readme\"\n      }}>{`downshift`}</a>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`react-form-package`}</inlineCode>{` has a `}<inlineCode parentName=\"p\">{`<FieldWrapper />`}</inlineCode>{` component. This component exposes four props to the child component: `}<inlineCode parentName=\"p\">{`onFocus`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`onBlur`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`meta`}</inlineCode>{`.`}</p>\n    <p>{`This props are functions that takes exactly one argument: `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`. Which should be a `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` for input fields or a `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode>{` for a checkbox.`}</p>\n    <h2 {...{\n      \"id\": \"autocomplete\"\n    }}>{`Autocomplete`}</h2>\n    <p>{`First off, import your components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport Downshift from 'downshift';\nimport {\n  FormControl,\n  Label,\n} from 'styled-bootstrap-components';\n`}</code></pre>\n    <p>{`The next step is to create a `}<inlineCode parentName=\"p\">{`Autocomplete`}</inlineCode>{` component.`}</p>\n    <p>{`We use the standard example from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/paypal/downshift#readme\"\n      }}>{`downshift`}</a>{` documentation.`}</p>\n    <p>{`We use the exposed function props to change the state of the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{`. Take a look at the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`<Downshift />`}</inlineCode>{` component, or the `}<inlineCode parentName=\"p\">{`onFocus`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onBlur`}</inlineCode>{` function on the input component, or the `}<inlineCode parentName=\"p\">{`meta`}</inlineCode>{` data used on the `}<inlineCode parentName=\"p\">{`<FormControl />`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// ./Autocomplete.js\n\nconst items = [\n  { value: 'apple' },\n  { value: 'pear' },\n  { value: 'orange' },\n  { value: 'grape' },\n  { value: 'banana' },\n];\n\nconst Autocomplete = (props) => (\n  <Downshift\n    // here we are using the onChange function\n    onChange={(item) => props.onChange(item.value)}\n    itemToString={(item) => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n    }) => (\n      <div>\n        <Label {...getLabelProps()}>Enter a fruit: </Label>\n        <FormControl\n          {...getInputProps({\n            // here we are using the onFocus and onBlur function\n            onFocus: (e) => props.onFocus(e.target.value),\n            onBlur: (e) => props.onBlur(e.target.value),\n            placeholder: 'apple',\n          })}\n          // here we are using the meta data\n          valid={props.meta.touched ? props.meta.valid : undefined}\n          invalid={props.meta.touched ? props.meta.invalid : undefined}\n        />\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n              .filter((item) => !inputValue || item.value.includes(inputValue))\n              .map((item, index) => (\n                <li\n                  {...getItemProps({\n                    key: item.value,\n                    index,\n                    item,\n                    style: {\n                      backgroundColor:\n                        highlightedIndex === index ? 'lightgray' : 'white',\n                      fontWeight: selectedItem === item ? 'bold' : 'normal',\n                    },\n                  })}\n                >\n                  {item.value}\n                </li>\n              ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift>\n);\n\nexport { Autocomplete };\n`}</code></pre>\n    <p>{`Now we have to import all components that we need and use our `}<inlineCode parentName=\"p\">{`<FieldWrapper />`}</inlineCode>{` component inside the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { Autocomplete } from './Autocomplete';\nimport {\n  Form,\n  FieldWrapper,\n  Button,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`If you visit the focus and blur the input now there will be a error message, telling you that this field is required. If you type something and select a fruit from the autocompletion you will be able to submit the form. If the field was touched and the field is invalid it will use a red border, if the field was touched and the field is valid it will use a green border.`}</p>\n    <Playground __position={0} __code={'<Form validate>\\n  <div>\\n    <FieldWrapper type=\\\"text\\\" id=\\\"autocomplete\\\" required>\\n      <Autocomplete />\\n    </FieldWrapper>\\n  </div>\\n  <div>\\n    <Button\\n      type=\\\"submit\\\"\\n      onClick={state => {\\n        alert(JSON.stringify(state, null, 2))\\n        alert(\\'open the console to see the whole state...\\')\\n        console.log(state)\\n      }}\\n    >\\n      Submit\\n    </Button>\\n  </div>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      FieldWrapper,\n      Select,\n      RadioGroup,\n      Button,\n      Downshift,\n      Playground,\n      Autocomplete\n    }} mdxType=\"Playground\">\n  <Form validate mdxType=\"Form\">\n    <div>\n    <FieldWrapper type=\"text\" id=\"autocomplete\" required mdxType=\"FieldWrapper\">\n      <Autocomplete mdxType=\"Autocomplete\" />\n    </FieldWrapper>\n    </div>\n    <div>\n      <Button type=\"submit\" onClick={state => {\n            alert(JSON.stringify(state, null, 2));\n            alert('open the console to see the whole state...');\n            console.log(state);\n          }} mdxType=\"Button\">\n        Submit\n      </Button>\n    </div>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}