(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./docz/200.thirdPartyComponents.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js"),m=t("./src/index.js"),p=t("./node_modules/downshift/dist/downshift.esm.js"),l=t("./node_modules/docz/dist/index.m.js"),i=t("./node_modules/styled-form-component/lib/index.js"),c=t("./node_modules/styled-base-components/lib/index.js"),s=[{value:"apple"},{value:"pear"},{value:"orange"},{value:"grape"},{value:"banana"}],u=function(e){return o.a.createElement(p.a,{onChange:function(n){return e.onChange(n.value)},itemToString:function(e){return e?e.value:""}},function(n){var t=n.getInputProps,a=n.getItemProps,r=n.getLabelProps,m=n.getMenuProps,p=n.isOpen,l=n.inputValue,u=n.highlightedIndex,d=n.selectedItem;return o.a.createElement("div",null,o.a.createElement(c.Label,r(),"Enter a fruit: "),o.a.createElement(i.FormControl,Object.assign({},t({onFocus:function(n){return e.onFocus(n.target.value)},onBlur:function(n){return e.onBlur(n.target.value)},placeholder:"apple"}),{valid:e.meta.touched?e.meta.valid:void 0,invalid:e.meta.touched?e.meta.invalid:void 0})),o.a.createElement("ul",m(),p?s.filter(function(e){return!l||e.value.includes(l)}).map(function(e,n){return o.a.createElement("li",a({key:e.value,index:n,item:e,style:{backgroundColor:u===n?"lightgray":"white",fontWeight:d===e?"bold":"normal"}}),e.value)}):null))})};function d(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}u.__docgenInfo={description:"",methods:[],displayName:"Autocomplete"};n.default=function(e){var n=e.components,t=d(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"third-party-components"}},"Third Party Components"),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"Working with third party components")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Sometimes you need to work with third party components to make something work properly, e.g. you need an autocompletion. This ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-form-package")," does not provide an autocompletion by default, but luckily you can use third party components within ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-form-package")," and keep all the functionality."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To give you an example of how to create a autocompletion form we use ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/paypal/downshift#readme"}},"downshift"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-form-package")," has a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<FieldWrapper />")," component. This component exposes four props to the child component: ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onFocus"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onBlur"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onChange")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"meta"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This props are functions that takes exactly one argument: ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"value"),". Which should be a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"string")," for input fields or a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"boolean")," for a checkbox."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"autocomplete"}},"Autocomplete"),o.a.createElement(r.MDXTag,{name:"p",components:n},"First off, import your components."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import React from 'react';\nimport Downshift from 'downshift';\nimport {\n  FormControl,\n  Label,\n} from 'styled-bootstrap-components';\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The next step is to create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Autocomplete")," component."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We use the standard example from the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/paypal/downshift#readme"}},"downshift")," documentation."),o.a.createElement(r.MDXTag,{name:"p",components:n},"We use the exposed function props to change the state of the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<Form />"),". Take a look at the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onChange")," function of the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<Downshift />")," component, or the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onFocus")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onBlur")," function on the input component, or the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"meta")," data used on the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<FormControl />")," component."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"// ./Autocomplete.js\n\nconst items = [\n  { value: 'apple' },\n  { value: 'pear' },\n  { value: 'orange' },\n  { value: 'grape' },\n  { value: 'banana' },\n];\n\nconst Autocomplete = (props) => (\n  <Downshift\n    // here we are using the onChange function\n    onChange={(item) => props.onChange(item.value)}\n    itemToString={(item) => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n    }) => (\n      <div>\n        <Label {...getLabelProps()}>Enter a fruit: </Label>\n        <FormControl\n          {...getInputProps({\n            // here we are using the onFocus and onBlur function\n            onFocus: (e) => props.onFocus(e.target.value),\n            onBlur: (e) => props.onBlur(e.target.value),\n            placeholder: 'apple',\n          })}\n          // here we are using the meta data\n          valid={props.meta.touched ? props.meta.valid : undefined}\n          invalid={props.meta.touched ? props.meta.invalid : undefined}\n        />\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n              .filter((item) => !inputValue || item.value.includes(inputValue))\n              .map((item, index) => (\n                <li\n                  {...getItemProps({\n                    key: item.value,\n                    index,\n                    item,\n                    style: {\n                      backgroundColor:\n                        highlightedIndex === index ? 'lightgray' : 'white',\n                      fontWeight: selectedItem === item ? 'bold' : 'normal',\n                    },\n                  })}\n                >\n                  {item.value}\n                </li>\n              ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift>\n);\n\nexport { Autocomplete };\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Now we have to import all components that we need and use our ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<FieldWrapper />")," component inside the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<Form />")," component."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import React from 'react';\nimport { Autocomplete } from './Autocomplete';\nimport {\n  Form,\n  FieldWrapper,\n  Button,\n} from 'react-form-package';\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you visit the focus and blur the input now there will be a error message, telling you that this field is required. If you type something and select a fruit from the autocompletion you will be able to submit the form. If the field was touched and the field is invalid it will use a red border, if the field was touched and the field is valid it will use a green border."),o.a.createElement(l.Playground,{__position:0,__code:'<Form validate>\n  <div>\n    <FieldWrapper type="text" id="autocomplete" required>\n      <Autocomplete />\n    </FieldWrapper>\n  </div>\n  <div>\n    <Button\n      type="submit"\n      onClick={state => {\n        alert(JSON.stringify(state, null, 2))\n        alert(\'open the console to see the whole state...\')\n        console.log(state)\n      }}\n    >\n      Submit\n    </Button>\n  </div>\n</Form>',__scope:{props:t,Form:m.d,Field:m.b,FieldWrapper:m.c,Select:m.f,RadioGroup:m.e,Button:m.a,Downshift:p.a,Autocomplete:u}},o.a.createElement(m.d,{validate:!0},o.a.createElement("div",null,o.a.createElement(m.c,{type:"text",id:"autocomplete",required:!0},o.a.createElement(u,null))),o.a.createElement("div",null,o.a.createElement(m.a,{type:"submit",onClick:function(e){alert(JSON.stringify(e,null,2)),alert("open the console to see the whole state..."),console.log(e)}},"Submit")))))}}}]);