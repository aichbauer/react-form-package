(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"./docz/why.mdx":function(e,a,n){"use strict";n.r(a);var t=n("./node_modules/react/index.js"),o=n.n(t),r=n("./node_modules/@mdx-js/tag/dist/index.js");function m(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}a.default=function(e){var a=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:a},o.a.createElement(r.MDXTag,{name:"h1",components:a,props:{id:"why"}},"Why?"),o.a.createElement(r.MDXTag,{name:"blockquote",components:a},o.a.createElement(r.MDXTag,{name:"p",components:a,parentName:"blockquote"},"TL;DR: I wanted a form with inbuilt validation and state management that a developer can use only by knowing HTML")),o.a.createElement(r.MDXTag,{name:"p",components:a},"Forms! A pain in the ass for a user when they are not well developed. Mostly because developing forms is a pain in the ass too."),o.a.createElement(r.MDXTag,{name:"p",components:a},"Why is developing good forms not easy?"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Because"),o.a.createElement(r.MDXTag,{name:"ul",components:a},o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"of a lot of communication between the user and the program"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"there are a lot of changes in the state of a program"),o.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"of the validation of the user input")),o.a.createElement(r.MDXTag,{name:"p",components:a},"I wanted a form that a developer can use only by knowing HTML. Most frontend developers know how a valid HTML form looks like on first sight but no frontend developer knows how a JavaScript library works when its been used for the first time. That is the reason why ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react-form-package")," was created. By using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react-form-package")," you create a similar structure to a valid HTML form. Thats it. Input validation, form state management, and user communication is all handled by ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react-form-package"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:a,props:{id:"why-not-use-formik-or-react-final-form"}},"Why not use formik or react-final-form"),o.a.createElement(r.MDXTag,{name:"p",components:a},"Most of the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"form libraries")," I found were using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"render props")," or ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"higher order components"),", which is not a ideal set up for a form because when the forms are getting more complex the more confusing the code will get. A form should be declarative, and what is more declartive than a plain HTML form? Not a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"render prop hell")," or ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"higher order confusion"),". Also I did not find any library that came with an inbuilt validation system. Why do you need this? You should not consider writing your own validations if an email is always validated the same way, or the structure of a url is always the same. Writing your validations yourself can mislead you to produce duplicate code and this could lead to more bugs. What is also important: being flexible with styling. This is also not always easy with libararies. ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react-form-package")," only brings the logic and you choose how to style it. ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"CSS-in-JS"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"CSS"),", or the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"style prop"),", it is up to you."))}}}]);