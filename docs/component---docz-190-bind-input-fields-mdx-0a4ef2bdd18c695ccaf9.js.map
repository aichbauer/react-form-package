{"version":3,"sources":["webpack:///../docz/190.bindInputFields.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Field","Button","Playground","id","type","placeholder","bindTo","bindToCallback","value","numbers","includes","split","Array","isArray","number1","parseInt","number2","toString","onClick","state","alert","JSON","stringify","console","log","isMDXComponent"],"mappings":"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","file":"component---docz-190-bind-input-fields-mdx-0a4ef2bdd18c695ccaf9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Field, Button } from '../src';\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"bind-input-fields\"\n    }}>{`Bind Input Fields`}</h1>\n    <p>{`Sometimes a input value depends on another input value, e.g. the use inputs a range of house numbers and you have to calculate the dependend household count. So that the user is able to skip some fields but is also able to chnage the value if the user knows it better.`}</p>\n    <h2 {...{\n      \"id\": \"bind-an-input-value-to-another-input-value\"\n    }}>{`Bind an input value to another input value`}</h2>\n    <p>{`To handle such cases there are two properties available on the `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`<RadioGroup />`}</inlineCode>{`, and the `}<inlineCode parentName=\"p\">{`<Select />`}</inlineCode>{` component.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bindTo`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the `}<inlineCode parentName=\"td\">{`id`}</inlineCode>{` of the field you want to manipulate`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bindToCallback`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Func`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the callback to set the target's (`}<inlineCode parentName=\"td\">{`bindTo`}</inlineCode>{`) input value, which gets called `}<inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h3>\n    <p>{`In our example we bind our first `}<inlineCode parentName=\"p\">{`housenumbers`}</inlineCode>{` input to the second `}<inlineCode parentName=\"p\">{`households`}</inlineCode>{` input. As long as the bound input field (`}<inlineCode parentName=\"p\">{`bindTo`}</inlineCode>{`, in our example the households field) is untouched (not blurred) the `}<inlineCode parentName=\"p\">{`binToCallback`}</inlineCode>{` will be executed `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` of the field where we have the `}<inlineCode parentName=\"p\">{`bindTo`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`bindToCallback`}</inlineCode>{` properties. The `}<inlineCode parentName=\"p\">{`bindToCallback`}</inlineCode>{` expects a String as return value, and gets the input value of the current input field `}<inlineCode parentName=\"p\">{`housenumbers`}</inlineCode>{`.`}</p>\n    <Playground __position={0} __code={'<Form>\\n  <div>\\n    <div>House numbers:</div>\\n\\n    <Field\\n      id=\\\"housenumbers\\\"\\n      type=\\\"text\\\"\\n      placeholder=\\\"2-7\\\"\\n      // bind this field to field with id `households`\\n      bindTo=\\\"households\\\"\\n      // when this field changes set the value of the\\n      // bound field (`households`) to the result of\\n      // this function, either a string or a boolean\\n      bindToCallback={value => {\\n        const numbers = value.includes(\\'-\\') ? value.split(\\'-\\') : value\\n\\n        if (!Array.isArray(numbers)) {\\n          return \\'1\\'\\n        }\\n\\n        const number1 = parseInt(numbers[0])\\n        const number2 = parseInt(numbers[1])\\n\\n        if (!number2 || number2 === number1) {\\n          return \\'1\\'\\n        }\\n\\n        if (number2 < number1) {\\n          return \\'0\\'\\n        }\\n\\n        const households = (number2 - number1 + 1).toString()\\n\\n        return households\\n      }}\\n    />\\n  </div>\\n\\n  <div>\\n    <div>Households:</div>\\n\\n    <Field id=\\\"households\\\" type=\\\"number\\\" placeholder=\\\"6\\\" />\\n  </div>\\n\\n  <div>\\n    <Button\\n      id=\\\"submit\\\"\\n      type=\\\"submit\\\"\\n      onClick={state => {\\n        alert(JSON.stringify(state, null, 2))\\n        alert(\\'open the console to see the whole state...\\')\\n        console.log(state)\\n      }}\\n    >\\n      Submit\\n    </Button>\\n  </div>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      Button,\n      Playground\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n        <div>\n\n  <div>\n    House numbers:\n  </div>\n\n  <Field id=\"housenumbers\" type=\"text\" placeholder=\"2-7\" // bind this field to field with id `households`\n          bindTo=\"households\" // when this field changes set the value of the \n          // bound field (`households`) to the result of \n          // this function, either a string or a boolean\n          bindToCallback={value => {\n            const numbers = value.includes('-') ? value.split('-') : value;\n\n            if (!Array.isArray(numbers)) {\n              return '1';\n            }\n\n            const number1 = parseInt(numbers[0]);\n            const number2 = parseInt(numbers[1]);\n\n            if (!number2 || number2 === number1) {\n              return '1';\n            }\n\n            if (number2 < number1) {\n              return '0';\n            }\n\n            const households = (number2 - number1 + 1).toString();\n            return households;\n          }} mdxType=\"Field\" />\n        </div>\n\n        <div>\n\n  <div>\n    Households:\n  </div>\n\n  <Field id=\"households\" type=\"number\" placeholder=\"6\" mdxType=\"Field\" />\n        </div>\n\n        <div>\n  <Button id=\"submit\" type=\"submit\" onClick={state => {\n            alert(JSON.stringify(state, null, 2));\n            alert('open the console to see the whole state...');\n            console.log(state);\n          }} mdxType=\"Button\">\n    Submit\n  </Button>\n\n        </div>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}