(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{zkaa:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return d}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),a=n("TjRS"),i=n("oXiK"),r=n("OxVU"),p=n("ZFoC"),l=n("Y6wW");n("aD51");function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docz/200.thirdPartyComponents.mdx"}});var m={_frontmatter:u},s=a.a;function d(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)(s,c({},m,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"third-party-components"},"Third Party Components"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Working with third party components")),Object(o.b)("p",null,"Sometimes you need to work with third party components to make something work properly, e.g. you need an autocompletion. This ",Object(o.b)("inlineCode",{parentName:"p"},"react-form-package")," does not provide an autocompletion by default, but luckily you can use third party components within ",Object(o.b)("inlineCode",{parentName:"p"},"react-form-package")," and keep all the functionality."),Object(o.b)("p",null,"To give you an example of how to create a autocompletion form we use ",Object(o.b)("a",c({parentName:"p"},{href:"https://github.com/paypal/downshift#readme"}),"downshift"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"react-form-package")," has a ",Object(o.b)("inlineCode",{parentName:"p"},"<FieldWrapper />")," component. This component exposes four props to the child component: ",Object(o.b)("inlineCode",{parentName:"p"},"onFocus"),", ",Object(o.b)("inlineCode",{parentName:"p"},"onBlur"),", ",Object(o.b)("inlineCode",{parentName:"p"},"onChange")," and ",Object(o.b)("inlineCode",{parentName:"p"},"meta"),"."),Object(o.b)("p",null,"This props are functions that takes exactly one argument: ",Object(o.b)("inlineCode",{parentName:"p"},"value"),". Which should be a ",Object(o.b)("inlineCode",{parentName:"p"},"string")," for input fields or a ",Object(o.b)("inlineCode",{parentName:"p"},"boolean")," for a checkbox."),Object(o.b)("h2",{id:"autocomplete"},"Autocomplete"),Object(o.b)("p",null,"First off, import your components."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport Downshift from 'downshift';\nimport {\n  FormControl,\n  Label,\n} from 'styled-bootstrap-components';\n")),Object(o.b)("p",null,"The next step is to create a ",Object(o.b)("inlineCode",{parentName:"p"},"Autocomplete")," component."),Object(o.b)("p",null,"We use the standard example from the ",Object(o.b)("a",c({parentName:"p"},{href:"https://github.com/paypal/downshift#readme"}),"downshift")," documentation."),Object(o.b)("p",null,"We use the exposed function props to change the state of the ",Object(o.b)("inlineCode",{parentName:"p"},"<Form />"),". Take a look at the ",Object(o.b)("inlineCode",{parentName:"p"},"onChange")," function of the ",Object(o.b)("inlineCode",{parentName:"p"},"<Downshift />")," component, or the ",Object(o.b)("inlineCode",{parentName:"p"},"onFocus")," and ",Object(o.b)("inlineCode",{parentName:"p"},"onBlur")," function on the input component, or the ",Object(o.b)("inlineCode",{parentName:"p"},"meta")," data used on the ",Object(o.b)("inlineCode",{parentName:"p"},"<FormControl />")," component."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-jsx"}),"// ./Autocomplete.js\n\nconst items = [\n  { value: 'apple' },\n  { value: 'pear' },\n  { value: 'orange' },\n  { value: 'grape' },\n  { value: 'banana' },\n];\n\nconst Autocomplete = (props) => (\n  <Downshift\n    // here we are using the onChange function\n    onChange={(item) => props.onChange(item.value)}\n    itemToString={(item) => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n    }) => (\n      <div>\n        <Label {...getLabelProps()}>Enter a fruit: </Label>\n        <FormControl\n          {...getInputProps({\n            // here we are using the onFocus and onBlur function\n            onFocus: (e) => props.onFocus(e.target.value),\n            onBlur: (e) => props.onBlur(e.target.value),\n            placeholder: 'apple',\n          })}\n          // here we are using the meta data\n          valid={props.meta.touched ? props.meta.valid : undefined}\n          invalid={props.meta.touched ? props.meta.invalid : undefined}\n        />\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n              .filter((item) => !inputValue || item.value.includes(inputValue))\n              .map((item, index) => (\n                <li\n                  {...getItemProps({\n                    key: item.value,\n                    index,\n                    item,\n                    style: {\n                      backgroundColor:\n                        highlightedIndex === index ? 'lightgray' : 'white',\n                      fontWeight: selectedItem === item ? 'bold' : 'normal',\n                    },\n                  })}\n                >\n                  {item.value}\n                </li>\n              ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift>\n);\n\nexport { Autocomplete };\n")),Object(o.b)("p",null,"Now we have to import all components that we need and use our ",Object(o.b)("inlineCode",{parentName:"p"},"<FieldWrapper />")," component inside the ",Object(o.b)("inlineCode",{parentName:"p"},"<Form />")," component."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport { Autocomplete } from './Autocomplete';\nimport {\n  Form,\n  FieldWrapper,\n  Button,\n} from 'react-form-package';\n")),Object(o.b)("p",null,"If you visit the focus and blur the input now there will be a error message, telling you that this field is required. If you type something and select a fruit from the autocompletion you will be able to submit the form. If the field was touched and the field is invalid it will use a red border, if the field was touched and the field is valid it will use a green border."),Object(o.b)(p.c,{__position:0,__code:'<Form validate>\n  <div>\n    <FieldWrapper type="text" id="autocomplete" required>\n      <Autocomplete />\n    </FieldWrapper>\n  </div>\n  <div>\n    <Button\n      type="submit"\n      onClick={state => {\n        alert(JSON.stringify(state, null, 2))\n        alert(\'open the console to see the whole state...\')\n        console.log(state)\n      }}\n    >\n      Submit\n    </Button>\n  </div>\n</Form>',__scope:{props:n,DefaultLayout:a.a,Form:i.d,Field:i.b,FieldWrapper:i.c,Select:i.f,RadioGroup:i.e,Button:i.a,Downshift:r.a,Playground:p.c,Autocomplete:l.a},mdxType:"Playground"},Object(o.b)(i.d,{validate:!0,mdxType:"Form"},Object(o.b)("div",null,Object(o.b)(i.c,{type:"text",id:"autocomplete",required:!0,mdxType:"FieldWrapper"},Object(o.b)(l.a,{mdxType:"Autocomplete"}))),Object(o.b)("div",null,Object(o.b)(i.a,{type:"submit",onClick:function(e){alert(JSON.stringify(e,null,2)),alert("open the console to see the whole state..."),console.log(e)},mdxType:"Button"},"Submit")))))}d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docz/200.thirdPartyComponents.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docz-200-third-party-components-mdx-6b2f3c3e138544e2ccf3.js.map