{"version":3,"sources":["webpack:///../docz/170.dynamicFields2.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Button","Field","Select","RadioGroup","Playground","DynamicFieldsOnChange","DynamicFieldsOnClick","isMDXComponent"],"mappings":"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","file":"component---docz-170-dynamic-fields-2-mdx-49a4eb14ff46ba6301ae.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Button, Field, Select, RadioGroup } from '../src';\nimport { Playground } from 'docz';\nimport { DynamicFieldsOnChange } from './components/DynamicFieldsOnChange';\nimport { DynamicFieldsOnClick } from './components/DynamicFieldsOnClick';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dynamic-fields\"\n    }}>{`Dynamic Fields`}</h1>\n    <p>{`Sometimes you do not know how many fields your form should have, so you need a way to add dynamic fields on user events, e.g. on a button click if a user should decide if a new field is needed, or on a change of a field, e.g. when a field is filled a new field should appear.`}</p>\n    <h2 {...{\n      \"id\": \"onclick\"\n    }}>{`onClick`}</h2>\n    <p>{`First off, import your components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {\n  Form,\n  Field,\n  Button,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`The next step is to create a `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` that will render our form.`}</p>\n    <p>{`The state is allways handled by `}<inlineCode parentName=\"p\">{`react-form-package`}</inlineCode>{`, the only thing that you need todo is to handle the appearence of the form, e.g. add or remove the input.`}</p>\n    <p>{`We need create a `}<inlineCode parentName=\"p\">{`addField`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`removeField`}</inlineCode>{`, and optionally a `}<inlineCode parentName=\"p\">{`calculateAvailableId`}</inlineCode>{` function. The `}<inlineCode parentName=\"p\">{`calculateAvailableId`}</inlineCode>{` is only nessacary if you work on non unique index-based ids so that you ensure you do not overide an existing id.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`addField`}</inlineCode>{` function is here to add a new Field when you click on a `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{` component.`}</p>\n    <p>{`To update the state of the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component, you need to add a `}<inlineCode parentName=\"p\">{`rfpRole`}</inlineCode>{` property and a `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` or a `}<inlineCode parentName=\"p\">{`fieldId`}</inlineCode>{` property to a `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{` component.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`rfpRole`}</inlineCode>{` takes a string which is either `}<inlineCode parentName=\"p\">{`addField`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`removeField`}</inlineCode>{`. `}</p>\n    <p>{`If you use the `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{` component to add a new field to the state of the form component you need to provide a `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` property which takes an object that represents your new `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component. This object has to have at least a `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`, but you can extend this object with rules like: `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`match`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`sameAs`}</inlineCode>{`.`}</p>\n    <p>{`If you use the `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{` component to add remove an existing field from the state of the form component you need to provide a `}<inlineCode parentName=\"p\">{`fieldId`}</inlineCode>{` property which takes a string: the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` of the field you want to remove.`}</p>\n    <p>{`In the state of the `}<inlineCode parentName=\"p\">{`DynamicFields`}</inlineCode>{` component you have to create an array where you add refrences to the fields of your dynamic `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` components. To add new fields you need to add a new refrence, so that the part of the DOM rerenders with the new Field Component. To remove the Fields not only from the state of the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component but also from the DOM, you need to remove the refrences in your state that the component rerenders that part of the DOM.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`class DynamicFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // the field refrences that we use to render in our <Form /> component\n      companies: [\n        {\n          id: 'company-0',\n        },\n      ],\n    };\n\n    this.addField = this.addField.bind(this);\n    this.removeField = this.removeField.bind(this);\n    this.calculateAvailableId = this.calculateAvailableId.bind(this);\n  }\n\n  calculateAvailableId() {\n    const {\n      companies,\n    } = this.state;\n\n    const arr = companies.map((item) => parseInt(item.id.split('-')[1], 10));\n\n    let currentHighestId = Math.max(...arr);\n    currentHighestId = currentHighestId !== -Infinity ? currentHighestId : 0;\n\n    const highestAvailableId = currentHighestId + 1;\n\n    return highestAvailableId;\n  }\n\n  addField() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    // add a new field refrence to the <Form /> component\n    this.setState({\n      companies: companies.concat({ id: \\`company-\\${highestAvailableId}\\` }),\n    });\n  }\n\n  removeField(idx) {\n    const {\n      companies,\n    } = this.state;\n\n    // remove a field refrence to the <Form /> component\n    this.setState({\n      companies: companies.filter((_, index) => idx !== index),\n    });\n  }\n\n  render() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    return (\n      <Form\n        validate\n      >\n        {/* render the <Field /> components based on our field refrences */}\n        {companies.map((company, idx) => (\n          <div>\n            <Field\n              id={company.id}\n              placeholder={\\`Company \\${company.id.split('-')[1]}\\`}\n              type=\"text\"\n              required\n            />\n            <Button\n              id=\"removeField\"\n              // add the rfpRole property\n              rfpRole=\"removeField\"\n              type=\"button\"\n              // add the fieldId property to remove the field from the state of the <Form /> component\n              fieldId={company.id}\n              onClick={() => this.removeField(idx)}\n            >\n              Remove Company\n            </Button>\n          </div>\n        ))}\n        <div>\n          <Button\n            id=\"addField\"\n            // add the rfpRole property\n            rfpRole=\"addField\"\n            type=\"button\"\n            // add the field property to add to the state state of the <Form /> component\n            field={{\n              id: \\`company-\\${highestAvailableId}\\`,\n              type: 'text',\n              required: true,\n            }}\n            onClick={() => this.addField()}\n          >\n            Add Company\n          </Button>\n        </div>\n        <div>\n          <Button\n            id=\"submit\"\n            type=\"submit\"\n            onClick={(state) => {\n              alert(JSON.stringify(state, null, 2));\n              alert('open the console to see the whole state...');\n              console.log(state);\n            }}\n          >\n            submit\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\nexport { DynamicFields };\n`}</code></pre>\n    <p>{`Now render this Component. Everytime you click on the button `}<inlineCode parentName=\"p\">{`Add Company`}</inlineCode>{` you get a new field, and everytime you click on the button `}<inlineCode parentName=\"p\">{`Remove Company`}</inlineCode>{` you remove the corresponding field.`}</p>\n    <Playground __position={0} __code={'<DynamicFieldsOnClick />'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Button,\n      Field,\n      Select,\n      RadioGroup,\n      Playground,\n      DynamicFieldsOnChange,\n      DynamicFieldsOnClick\n    }} mdxType=\"Playground\">\n  <DynamicFieldsOnClick mdxType=\"DynamicFieldsOnClick\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"onchange\"\n    }}>{`onChange`}</h2>\n    <p>{`First off, import your components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {\n  Form,\n  Field,\n  Button,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`The next step is to create a `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` that will render our form. `}</p>\n    <p>{`Everything stays the same as in the example above, except:`}</p>\n    <p>{`That we now use a `}<inlineCode parentName=\"p\">{`dynamic`}</inlineCode>{` property and the `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` property on the `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component. the `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` property takes the same properties as in the `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{` component. The `}<inlineCode parentName=\"p\">{`dynamic`}</inlineCode>{` property indicates that this `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component is dynamic and adds a new field in the state of the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component when this `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` is filled.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`class DynamicFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // the field refrences that we use to render in our <Form /> component\n    this.state = {\n      companies: [\n        {\n          id: 'company-0',\n        },\n      ],\n    };\n\n    this.addField = this.addField.bind(this);\n    this.removeField = this.removeField.bind(this);\n    this.calculateAvailableId = this.calculateAvailableId.bind(this);\n  }\n\n  calculateAvailableId() {\n    const {\n      companies,\n    } = this.state;\n\n    const arr = companies.map((item) => parseInt(item.id.split('-')[1], 10));\n\n    let currentHighestId = Math.max(...arr);\n    currentHighestId = currentHighestId !== -Infinity ? currentHighestId : 0;\n\n    const highestAvailableId = currentHighestId + 1;\n\n    return highestAvailableId;\n  }\n\n  addField(state, id) {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    // add a new field refrence to the <Form /> component\n    if (state.data[id] && parseInt(id.split('-')[1], 10) + 1 === highestAvailableId) {\n      this.setState({\n        companies: companies.concat({ id: \\`company-\\${highestAvailableId}\\` }),\n      });\n    }\n  }\n\n  removeField(idx) {\n    const {\n      companies,\n    } = this.state;\n\n    // remove a field refrence to the <Form /> component\n    this.setState({\n      companies: companies.filter((_, index) => idx !== index),\n    });\n  }\n\n  render() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    return (\n      <Form>\n        {/* render the <Field /> components based on our field refrences */}\n        {companies.map((company, idx) => (\n          <div>\n            <Field\n              id={company.id}\n              placeholder={\\`Company \\${company.id.split('-')[1]}\\`}\n              type=\"text\"\n              required\n              // add the dynamic property \n              dynamic\n              // add the field property to add to the state state of the <Form /> component\n              field={{\n                id: \\`company-\\${highestAvailableId}\\`,\n                type: 'text',\n                required: true,\n              }}\n              onChange={(state) => this.addField(state, company.id)}\n            />\n            {companies.length && (\n              <Button\n                id=\"removeField\"\n                // add the rfpRole property\n                rfpRole=\"removeField\"\n                type=\"button\"\n                // add the fieldId property to remove the field from the state of the <Form /> component\n                fieldId={company.id}\n                onClick={() => this.removeField(idx)}\n              >\n                Remove Company\n              </Button>\n            )}\n\n          </div>\n        ))}\n        <div>\n          <Button\n            id=\"submit\"\n            type=\"submit\"\n            onClick={(state) => {\n              alert(JSON.stringify(state, null, 2));\n              alert('open the console to see the whole state...');\n              console.log(state);\n            }}\n          >\n            submit\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\nexport { DynamicFieldsOnChange };\n`}</code></pre>\n    <p>{`Now render this Component. Everytime you fill out the `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component you will add a new `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{`, and everytime you click on the button `}<inlineCode parentName=\"p\">{`Remove Company`}</inlineCode>{` you remove the corresponding field.`}</p>\n    <Playground __position={1} __code={'<DynamicFieldsOnChange />'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Button,\n      Field,\n      Select,\n      RadioGroup,\n      Playground,\n      DynamicFieldsOnChange,\n      DynamicFieldsOnClick\n    }} mdxType=\"Playground\">\n  <DynamicFieldsOnChange mdxType=\"DynamicFieldsOnChange\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}