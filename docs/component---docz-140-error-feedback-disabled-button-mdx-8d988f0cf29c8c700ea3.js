(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{C1n4:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),r=n("TjRS"),a=n("ZFoC"),i=n("oXiK"),s=n("ZrGN");n("aD51");function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docz/140.errorFeedbackDisabledButton.mdx"}});var p={_frontmatter:l},u=r.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(o.b)(u,d({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"feedback-on-disabled-button"},"Feedback on disabled Button"),Object(o.b)("p",null,"Sometimes it is necessary to show an informal error message to the user when is hovering on a disabled button (which means the form is not valid yet)."),Object(o.b)("p",null,"For this example we use a popover for our disabled button that gives the user a hint what should be filled."),Object(o.b)("p",null,"First import all the components that we need. We use ",Object(o.b)("a",d({parentName:"p"},{href:"https://aichbauer.github.io/styled-bootstrap-components"}),"styled-bootstrap-components")," for our popup. You could also use a toast or something similar to indicate the user what fields are open."),Object(o.b)("pre",null,Object(o.b)("code",d({parentName:"pre"},{className:"language-js"}),"import {\n  Form,\n  Field,\n  Button,\n} from 'react-form-package';\nimport {\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverHeader,\n} from 'styled-bootstrap-component';\n")),Object(o.b)("p",null,"Next we make use of the buttons ",Object(o.b)("inlineCode",{parentName:"p"},"onMouseEnter")," function (unfortunatly the ",Object(o.b)("inlineCode",{parentName:"p"},"onMouseLeave")," function does not work on disabled buttons so we can not use it to hide the popover), and a ",Object(o.b)("inlineCode",{parentName:"p"},"setTimeout")," to hide the popover."),Object(o.b)("pre",null,Object(o.b)("code",d({parentName:"pre"},{className:"language-js"}),'class PopoverHint extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      top: 0,\n      left: 0,\n      hidden: true,\n      notValidFields: \'\',\n    };\n\n    this.handlePopover = this.handlePopover.bind(this);\n  }\n\n  handlePopover(ev, state) {\n    const { hidden } = this.state;\n\n    let notValidFields = Object.entries(state.meta).map((entry) => {\n      if (!entry[1].valid) {\n        return entry[0];\n      }\n    });\n\n    notValidFields = notValidFields.filter((i) => i !== undefined);\n\n    if (!state.formValid) {\n      this.setState({\n        top: ev.target.offsetTop - ev.target.offsetHeight,\n        left: ev.target.offsetLeft + ev.target.offsetWidth,\n        hidden: !hidden,\n        notValidFields: notValidFields.join(),\n      }, () => {\n        const { hidden: h } = this.state;\n        setTimeout(() => this.setState({\n          hidden: !h,\n        }), 1500);\n      });\n    }\n  }\n\n  render() {\n    const {\n      top,\n      left,\n      hidden,\n      notValidFields,\n    } = this.state;\n\n    return (\n      <Form\n        validate\n        input={<FormControl />}\n        button={<Btn primary mt="3px" mb="3px" />}\n      >\n        <Field type="email" id="email" required />\n        <div>\n          <Button\n            danger\n            onClick={(state) => {\n              alert(JSON.stringify(state, null, 2));\n              alert(\'open the console to see the whole state...\');\n              console.log(state);\n            }}\n            onMouseEnter={(e, state) => this.handlePopover(e, state)}\n          >\n            Hover button to show which fields are not valid\n          </Button>\n          <Popover\n            hidden={hidden}\n            style={{\n              top: `${top}px`,\n              left: `${left}px`,\n            }}\n            right\n          >\n            <PopoverArrow right />\n            <PopoverHeader right>You need to fill out this fields</PopoverHeader>\n            <PopoverBody right>{notValidFields}</PopoverBody>\n          </Popover>\n        </div>\n      </Form>\n    );\n  }\n}\n\nexport { PopoverHint };\n')),Object(o.b)("p",null,"Now we render the ",Object(o.b)("inlineCode",{parentName:"p"},"<PopoverHint />")," and can see the result."),Object(o.b)(a.c,{__position:0,__code:"<PopoverHint />",__scope:{props:n,DefaultLayout:r.a,Playground:a.c,Form:i.d,Field:i.b,Button:i.a,PopoverHint:s.a},mdxType:"Playground"},Object(o.b)(s.a,{mdxType:"PopoverHint"})))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docz/140.errorFeedbackDisabledButton.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docz-140-error-feedback-disabled-button-mdx-8d988f0cf29c8c700ea3.js.map