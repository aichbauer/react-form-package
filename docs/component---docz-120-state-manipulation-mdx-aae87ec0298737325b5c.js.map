{"version":3,"sources":["webpack:///../docz/120.stateManipulation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Field","Button","Playground","autocapitalize","validate","id","type","preOnChange","value","required","onClick","state","alert","JSON","stringify","console","log","isMDXComponent"],"mappings":"shBASO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,8BACE,iBAAGC,WAAW,cAAd,uDAEF,uRACA,sEAAqD,0BAAYA,WAAW,KAAvB,eAArD,2IACA,mJACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,giBAAyiBC,QAAS,CACnlBL,QACAH,kBACAS,SACAC,UACAC,WACAC,eACAC,iCACCT,QAAQ,cACb,YAAC,IAAD,CAAMU,UAAQ,EAACV,QAAQ,QACrB,uBACE,gCAGA,YAAC,IAAD,CAAOW,GAAG,OAAOC,KAAK,OAClBC,YAAa,SAAAC,GAAK,OAAIL,yBAAeK,EAAO,UAAUC,UAAQ,EAACf,QAAQ,WAE7E,uBACE,YAAC,IAAD,CAAQW,GAAG,SAASC,KAAK,SAASI,QAAS,SAAAC,GACrCC,MAAMC,KAAKC,UAAUH,EAAO,KAAM,IAClCC,MAAM,8CACNG,QAAQC,IAAIL,IACXjB,QAAQ,UAJf,c,uMAcNH,EAAW0B,gBAAiB","file":"component---docz-120-state-manipulation-mdx-aae87ec0298737325b5c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Field, Button } from '../src';\nimport { Playground } from 'docz';\nimport { autocapitalize } from 'autocapitalize';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"state-manipulation\"\n    }}>{`State Manipulation`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`How to manipulate the state before it is validated`}</p>\n    </blockquote>\n    <p>{`Sometimes you need to manipulate the value of a input. It is not recommended, but there are some edge cases and situations where this comes in handy, e.g. you have an input and you have to ensure that the user capitalizes the first letter, e.g. on names.`}</p>\n    <p>{`For this use cases there is a property called `}<inlineCode parentName=\"p\">{`preOnChange`}</inlineCode>{`. This property takes a function that returns the new value of the input. You can only manipulate the value of the current input field.`}</p>\n    <p>{`The next example manipulates the input value that it always capitalizes the first letter of every word in the input field.`}</p>\n    <Playground __position={0} __code={'<Form validate>\\n  <div>\\n    <div>Name:</div>\\n    <Field\\n      id=\\\"name\\\"\\n      type=\\\"text\\\"\\n      // `value` is the current value of the input field\\n      preOnChange={value => autocapitalize(value, \\'words\\')}\\n      required\\n    />\\n  </div>\\n  <div>\\n    <Button\\n      id=\\\"submit\\\"\\n      type=\\\"submit\\\"\\n      onClick={state => {\\n        alert(JSON.stringify(state, null, 2))\\n        alert(\\'open the console to see the whole state...\\')\\n        console.log(state)\\n      }}\\n    >\\n      Submit\\n    </Button>\\n  </div>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      Button,\n      Playground,\n      autocapitalize\n    }} mdxType=\"Playground\">\n  <Form validate mdxType=\"Form\">\n    <div>\n      <div>\n        Name:\n      </div>\n      <Field id=\"name\" type=\"text\" // `value` is the current value of the input field\n          preOnChange={value => autocapitalize(value, 'words')} required mdxType=\"Field\" />\n    </div>\n    <div>\n      <Button id=\"submit\" type=\"submit\" onClick={state => {\n            alert(JSON.stringify(state, null, 2));\n            alert('open the console to see the whole state...');\n            console.log(state);\n          }} mdxType=\"Button\">\n        Submit\n      </Button>\n    </div>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}