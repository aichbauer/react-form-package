{"version":3,"sources":["webpack:///../docz/180.dynamicFields3.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Button","Field","Select","RadioGroup","Playground","MultipleDynamicFields","isMDXComponent"],"mappings":"yhBASO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,0HAAyG,0BAAYC,WAAW,KAAvB,cAAzG,QAAwK,0BAAYA,WAAW,KAAvB,eAAxK,qDAAqR,0BAAYA,WAAW,KAAvB,YAArR,0DAAoY,0BAAYA,WAAW,KAAvB,SAApY,uGAA6hB,0BAAYA,WAAW,KAAvB,YAA7hB,qDAAuoB,0BAAYA,WAAW,KAAvB,WAAvoB,yCACA,iBAAQ,CACN,GAAM,4CADR,4CAGA,2DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uGASL,mDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,k/GAmJL,2GACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4BAA6BC,QAAS,CACvEL,QACAH,kBACAS,SACAC,WACAC,UACAC,WACAC,eACAC,eACAC,2BACCX,QAAQ,cACb,YAAC,IAAD,CAAuBA,QAAQ,4B,oMAMjCH,EAAWe,gBAAiB","file":"component---docz-180-dynamic-fields-3-mdx-eba3c72ec3c450295dbd.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Button, Field, Select, RadioGroup } from '../src';\nimport { Playground } from 'docz';\nimport { MultipleDynamicFields } from './components/MultipleDynamicFields';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dynamic-fields\"\n    }}>{`Dynamic Fields`}</h1>\n    <p>{`When you have a part of your form that consists of multiple fields that needs to be dynamic, e.g. `}<inlineCode parentName=\"p\">{`streetname`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`housenumber`}</inlineCode>{`. >ou can add multiple fields to the state of the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component by simle passing an array of objects to the `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` property instead of a single object. The same way you can remove multiple fields from state of the `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component, by passing an array of strings to the `}<inlineCode parentName=\"p\">{`fieldId`}</inlineCode>{` property instead of a single string.`}</p>\n    <h2 {...{\n      \"id\": \"add-multiple-dynamic-fields-to-the-state\"\n    }}>{`Add multiple dynamic fields to the state`}</h2>\n    <p>{`First off, import your components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {\n  Form,\n  Field,\n  Button,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`Now create your component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`class MultipleDynamicFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      companies: [\n        {\n          id: 'street-0',\n        },\n      ],\n    };\n\n    this.addField = this.addField.bind(this);\n    this.removeField = this.removeField.bind(this);\n    this.calculateAvailableId = this.calculateAvailableId.bind(this);\n  }\n\n  calculateAvailableId() {\n    const {\n      companies,\n    } = this.state;\n\n    const arr = companies.map((item) => parseInt(item.id.split('-')[1], 10));\n\n    let currentHighestId = Math.max(...arr);\n    currentHighestId = currentHighestId !== -Infinity ? currentHighestId : 0;\n\n    const highestAvailableId = currentHighestId + 1;\n\n    return highestAvailableId;\n  }\n\n  addField() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    this.setState({\n      companies: companies.concat({ id: \\`street-\\${highestAvailableId}\\` }),\n    });\n  }\n\n  removeField(idx) {\n    const {\n      companies,\n    } = this.state;\n\n    this.setState({\n      companies: companies.filter((_, index) => idx !== index),\n    });\n  }\n\n  render() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    return (\n      <Form\n        validate\n      >\n        {companies.map((street, idx) => (\n          <div>\n            <div>\n              <Field\n                id={\\`\\${street.id}\\`}\n                placeholder=\"Street name\"\n                type=\"text\"\n                required\n              />\n            </div>\n            <div>\n              <Field\n                id={\\`housenumber-\\${street.id.split('-')[1]}\\`}\n                placeholder=\"House number\"\n                type=\"number\"\n                required\n              />\n            </div>\n            <Button\n              id=\"removeField\"\n              rfpRole=\"removeField\"\n              type=\"button\"\n              // pass multiple fieldIds \n              // in an array to the \n              // fieldId\n              fieldId={[\n                \\`\\${street.id}\\`,\n                \\`housenumber-\\${street.id.split('-')[1]}\\`,\n              ]}\n              onClick={() => this.removeField(idx)}\n            >\n              Remove Company\n            </Button>\n          </div>\n        ))}\n        <div>\n          <Button\n            id=\"addField\"\n            rfpRole=\"addField\"\n            type=\"button\"\n            // pass multiple field objects \n            // in an array to the \n            // field property\n            field={[\n              {\n                id: \\`street-\\${highestAvailableId}\\`,\n                type: 'text',\n                required: true,\n              },\n              {\n                id: \\`housenumber-\\${highestAvailableId}\\`,\n                type: 'number',\n                required: true,\n              },\n            ]}\n            onClick={() => this.addField()}\n          >\n            Add Company Field\n          </Button>\n        </div>\n        <div>\n          <Button\n            id=\"submit\"\n            type=\"submit\"\n            onClick={(state) => {\n              alert(JSON.stringify(state, null, 2));\n              alert('open the console to see the whole state...');\n              console.log(state);\n            }}\n          >\n            submit\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\nexport { MultipleDynamicFields };\n`}</code></pre>\n    <p>{`Now lets render this component and see how you can add and remove multiple fields.`}</p>\n    <Playground __position={0} __code={'<MultipleDynamicFields />'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Button,\n      Field,\n      Select,\n      RadioGroup,\n      Playground,\n      MultipleDynamicFields\n    }} mdxType=\"Playground\">\n  <MultipleDynamicFields mdxType=\"MultipleDynamicFields\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}