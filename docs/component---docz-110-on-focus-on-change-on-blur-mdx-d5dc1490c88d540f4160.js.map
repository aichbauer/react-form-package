{"version":3,"sources":["webpack:///../docz/110.onFocusOnChangeOnBlur.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Field","Playground","id","type","value","onFocus","state","console","log","onChange","onBlur","isMDXComponent"],"mappings":"0gBAQO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,2BADR,6BAGA,8BACE,iBAAGC,WAAW,cAAd,wEAEF,gfACA,qFAAoE,0BAAYA,WAAW,KAAvB,sBAApE,iOAAoW,0BAAYA,WAAW,KAAvB,eAApW,SAAqa,mBAAGA,WAAW,KAAQ,CACvb,KAAQ,2CADyZ,sBAAra,MAGA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gEAOL,iCAAgB,0BAAYA,WAAW,KAAvB,YAAhB,kBAAuF,0BAAYA,WAAW,KAAvB,aAAvF,oBAAiK,0BAAYA,WAAW,KAAvB,WAAjK,cACA,8BACE,iBAAGA,WAAW,cAAd,gCAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4LAAmMC,QAAS,CAC7OL,QACAH,kBACAS,SACAC,UACAC,gBACCP,QAAQ,cACb,YAAC,IAAD,CAAMA,QAAQ,QAIZ,YAAC,IAAD,CAAOQ,GAAG,QAAQC,KAAK,QAAQC,MAAM,mBAAmBC,QAAS,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,IAAQZ,QAAQ,YAGtG,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,gEAOL,iCAAgB,0BAAYA,WAAW,KAAvB,YAAhB,kBAAuF,0BAAYA,WAAW,KAAvB,aAAvF,oBAAiK,0BAAYA,WAAW,KAAvB,YAAjK,cACA,8BACE,iBAAGA,WAAW,cAAd,gCAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8LAAqMC,QAAS,CAC/OL,QACAH,kBACAS,SACAC,UACAC,gBACCP,QAAQ,cACb,YAAC,IAAD,CAAMA,QAAQ,QAIZ,YAAC,IAAD,CAAOQ,GAAG,QAAQC,KAAK,QAAQC,MAAM,mBAAmBK,SAAU,SAAAH,GAAK,OAAIC,QAAQC,IAAIF,IAAQZ,QAAQ,YAGvG,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,gEAOL,iCAAgB,0BAAYA,WAAW,KAAvB,YAAhB,kBAAuF,0BAAYA,WAAW,KAAvB,aAAvF,oBAAiK,0BAAYA,WAAW,KAAvB,UAAjK,cACA,8BACE,iBAAGA,WAAW,cAAd,gCAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0LAAiMC,QAAS,CAC3OL,QACAH,kBACAS,SACAC,UACAC,gBACCP,QAAQ,cACb,YAAC,IAAD,CAAMA,QAAQ,QAIZ,YAAC,IAAD,CAAOQ,GAAG,QAAQC,KAAK,QAAQC,MAAM,mBAAmBM,OAAQ,SAAAJ,GAAK,OAAIC,QAAQC,IAAIF,IAAQZ,QAAQ,a,2MAOzGH,EAAWoB,gBAAiB","file":"component---docz-110-on-focus-on-change-on-blur-mdx-d5dc1490c88d540f4160.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Field } from '../src';\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"onfocus-onchange-onblur\"\n    }}>{`onFocus, onChange, onBlur`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`get access to the state everytime the user interacts with your form`}</p>\n    </blockquote>\n    <p>{`Sometimes, access to the forms state is needed even before the user submits the form. This can be if you want to store the forms state on the server on every change (e.g. every time the user changes a input or everytime the user blurs an input) or you want to check if the users input is already taken (e.g. a user might not be allowed to use a email or a username that is already taken and you want to give the user a fast respond before the user even submits the form).`}</p>\n    <p>{`You are not able to modify the state on this callbacks since `}<inlineCode parentName=\"p\">{`react-form-package`}</inlineCode>{` takes care of the state management, but you can use the state to communicate with a server or change the UI corresponding to the current state. If you have an edge case where you have to modify the state of the input use `}<inlineCode parentName=\"p\">{`preOnChange`}</inlineCode>{` (see `}<a parentName=\"p\" {...{\n        \"href\": \"/react-form-package/state-manipulation\"\n      }}>{`State Manipulation`}</a>{`).`}</p>\n    <h2 {...{\n      \"id\": \"onfocus\"\n    }}>{`onFocus`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {\n  Form,\n  Field,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`Render a `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` with an email `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component and a `}<inlineCode parentName=\"p\">{`onFocus`}</inlineCode>{` property.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Take a look at the console.`}</p>\n    </blockquote>\n    <Playground __position={0} __code={'<Form>\\n  {/* do something with the state onFocus */}\\n  <Field\\n    id=\\\"email\\\"\\n    type=\\\"email\\\"\\n    value=\\\"test@example.com\\\"\\n    onFocus={state => console.log(state)}\\n  />\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      Playground\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n    {\n          /* do something with the state onFocus */\n        }\n    <Field id=\"email\" type=\"email\" value=\"test@example.com\" onFocus={state => console.log(state)} mdxType=\"Field\" />\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"onchange\"\n    }}>{`onChange`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {\n  Form,\n  Field,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`Render a `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` with an email `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component and a `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` property.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Take a look at the console.`}</p>\n    </blockquote>\n    <Playground __position={1} __code={'<Form>\\n  {/* do something with the state onChange */}\\n  <Field\\n    id=\\\"email\\\"\\n    type=\\\"email\\\"\\n    value=\\\"test@example.com\\\"\\n    onChange={state => console.log(state)}\\n  />\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      Playground\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n    {\n          /* do something with the state onChange */\n        }\n    <Field id=\"email\" type=\"email\" value=\"test@example.com\" onChange={state => console.log(state)} mdxType=\"Field\" />\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"onblur\"\n    }}>{`onBlur`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {\n  Form,\n  Field,\n} from 'react-form-package';\n`}</code></pre>\n    <p>{`Render a `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` with an email `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{` component and a `}<inlineCode parentName=\"p\">{`onBlur`}</inlineCode>{` property.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Take a look at the console.`}</p>\n    </blockquote>\n    <Playground __position={2} __code={'<Form>\\n  {/* do something with the state onBlur */}\\n  <Field\\n    id=\\\"email\\\"\\n    type=\\\"email\\\"\\n    value=\\\"test@example.com\\\"\\n    onBlur={state => console.log(state)}\\n  />\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      Playground\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n    {\n          /* do something with the state onBlur */\n        }\n    <Field id=\"email\" type=\"email\" value=\"test@example.com\" onBlur={state => console.log(state)} mdxType=\"Field\" />\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}