{"version":3,"sources":["webpack:///../docz/160.dynamicFIelds.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Button","Field","Select","RadioGroup","Playground","checkboxData","selectData","radioData","map","checkbox","Fragment","name","id","type","disabled","value","selectOption","radioOption","onClick","state","alert","JSON","stringify","console","log","isMDXComponent"],"mappings":"okBAWO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,0DAAyC,0BAAYC,WAAW,KAAvB,QAAzC,uGAAiM,0BAAYA,WAAW,KAAvB,cAAjM,KAA6P,0BAAYA,WAAW,KAAvB,gBAA7P,QAA8T,0BAAYA,WAAW,KAAvB,iBAA9T,KACA,6FAA4E,0BAAYA,WAAW,KAAvB,YAA5E,6BAA8J,0BAAYA,WAAW,KAAvB,cAA9J,KAA0N,0BAAYA,WAAW,KAAvB,gBAA1N,SAA4R,0BAAYA,WAAW,KAAvB,iBAA5R,iBAAuW,0BAAYA,WAAW,KAAvB,YAAvW,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mPAYL,sFACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oiCAAyjCC,QAAS,CACnmCL,QACAH,kBACAS,SACAC,WACAC,UACAC,WACAC,eACAC,eACAC,iBACAC,eACAC,eACCb,QAAQ,cACb,YAAC,IAAD,CAAMA,QAAQ,QACZ,uBACGW,IAAaG,KAAI,SAAAC,GAAQ,OAAI,YAAC,IAAMC,SAAP,KAC1B,uBAAMD,EAASE,MACf,YAAC,IAAD,CAAOC,GAAIH,EAASG,GAAIC,KAAK,WAAWnB,QAAQ,eAGtD,uBACE,YAAC,IAAD,CAAQmB,KAAK,SAASD,GAAG,SAASlB,QAAQ,UACxC,sBAAQoB,UAAQ,EAACC,MAAM,IAAvB,4BAGCT,IAAWE,KAAI,SAAAQ,GAAY,OAAI,sBAAQD,MAAOC,EAAaD,OAAQC,EAAaL,WAGrF,uBACE,YAAC,IAAD,CAAYE,KAAK,QAAQD,GAAG,UAAUlB,QAAQ,cAC3Ca,IAAUC,KAAI,SAAAS,GAAW,OAAI,uBAC1B,uBAAMA,EAAYN,MAClB,qBAAOE,KAAK,QAAQF,KAAK,UAAUC,GAAIK,EAAYL,WAI3D,uBACE,YAAC,IAAD,CAAQC,KAAK,SAASD,GAAG,SAASM,QAAS,SAAAC,GACrCC,MAAMC,KAAKC,UAAUH,EAAO,KAAM,IAClCC,MAAM,8CACNG,QAAQC,IAAIL,IACXzB,QAAQ,UAJf,c,mMAcNH,EAAWkC,gBAAiB","file":"component---docz-160-dynamic-f-ields-mdx-9f06364d6afcc3e0ab9f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Button, Field, Select, RadioGroup } from '../src';\nimport { Playground } from 'docz';\nimport { data as checkboxData } from './data/checkboxes';\nimport { data as selectData } from './data/select';\nimport { data as radioData } from './data/radio';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dynamic-fields\"\n    }}>{`Dynamic Fields`}</h1>\n    <p>{`Sometimes you need to create your `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` out of dynamic data, e.g. from data you received from a server. This is mostly the case when using `}<inlineCode parentName=\"p\">{`checkboxes`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`radio groups`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`select fields`}</inlineCode>{`.`}</p>\n    <p>{`For example: you could receive the data from the server and than use `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` to set the data for your `}<inlineCode parentName=\"p\">{`checkboxes`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`radio groups`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`select fields`}</inlineCode>{` used in your `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async componentDidMount() {\n  const response = await getDataFromServer();\n\n  this.setState({\n    checkboxData: response.data.checkboxData,\n    selectData: response.data.selectData,\n    radioData: response.data.radioData,\n  });\n}\n`}</code></pre>\n    <p>{`Than in your render function you would return something like:`}</p>\n    <Playground __position={0} __code={'<Form>\\n  <div>\\n    {checkboxData.map(checkbox => (\\n      <React.Fragment>\\n        <div>{checkbox.name}</div>\\n        <Field id={checkbox.id} type=\\\"checkbox\\\" />\\n      </React.Fragment>\\n    ))}\\n  </div>\\n  <div>\\n    <Select type=\\\"select\\\" id=\\\"select\\\">\\n      <option disabled value=\\\"\\\">\\n        --- Select an option ---\\n      </option>\\n      {selectData.map(selectOption => (\\n        <option value={selectOption.value}>{selectOption.name}</option>\\n      ))}\\n    </Select>\\n  </div>\\n  <div>\\n    <RadioGroup type=\\\"radio\\\" id=\\\"radioID\\\">\\n      {radioData.map(radioOption => (\\n        <div>\\n          <div>{radioOption.name}</div>\\n          <input type=\\\"radio\\\" name=\\\"radioID\\\" id={radioOption.id} />\\n        </div>\\n      ))}\\n    </RadioGroup>\\n  </div>\\n  <div>\\n    <Button\\n      type=\\\"submit\\\"\\n      id=\\\"submit\\\"\\n      onClick={state => {\\n        alert(JSON.stringify(state, null, 2))\\n        alert(\\'open the console to see the whole state...\\')\\n        console.log(state)\\n      }}\\n    >\\n      Submit\\n    </Button>\\n  </div>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Button,\n      Field,\n      Select,\n      RadioGroup,\n      Playground,\n      checkboxData,\n      selectData,\n      radioData\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n    <div>\n      {checkboxData.map(checkbox => <React.Fragment>\n          <div>{checkbox.name}</div>\n          <Field id={checkbox.id} type=\"checkbox\" mdxType=\"Field\" />\n        </React.Fragment>)}\n    </div>\n    <div>\n      <Select type=\"select\" id=\"select\" mdxType=\"Select\">\n        <option disabled value=\"\">\n          --- Select an option ---\n        </option>\n        {selectData.map(selectOption => <option value={selectOption.value}>{selectOption.name}</option>)}  \n      </Select>\n    </div>\n    <div>\n      <RadioGroup type=\"radio\" id=\"radioID\" mdxType=\"RadioGroup\">\n        {radioData.map(radioOption => <div>\n            <div>{radioOption.name}</div>\n            <input type=\"radio\" name=\"radioID\" id={radioOption.id} />\n          </div>)}  \n      </RadioGroup>\n    </div>\n    <div>\n      <Button type=\"submit\" id=\"submit\" onClick={state => {\n            alert(JSON.stringify(state, null, 2));\n            alert('open the console to see the whole state...');\n            console.log(state);\n          }} mdxType=\"Button\">\n        Submit\n      </Button>\n    </div>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}