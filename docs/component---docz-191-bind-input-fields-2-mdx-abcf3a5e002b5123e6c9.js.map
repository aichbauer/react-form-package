{"version":3,"sources":["webpack:///../docz/191.bindInputFields2.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Form","Field","Select","Button","Playground","id","bindTo","bindToAlways","bindToCallback","value","disabled","type","rows","cols","onClick","state","alert","JSON","stringify","console","log","isMDXComponent"],"mappings":"2gBAQO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,iLAAgK,0BAAYC,WAAW,KAAvB,UAAhK,+BAAkP,mBAAGA,WAAW,KAAQ,CACpQ,KAAQ,0CADsO,qBAAlP,iBAEgD,0BAAYA,WAAW,KAAvB,kBAFhD,sYAEif,0BAAYA,WAAW,KAAvB,gBAFjf,2CAEqlB,0BAAYA,WAAW,KAAvB,kBAFrlB,gNAEg2B,0BAAYA,WAAW,KAAvB,UAFh2B,iEAEo9B,0BAAYA,WAAW,KAAvB,kBAFp9B,qCAEojC,0BAAYA,WAAW,KAAvB,UAFpjC,iEAGA,iBAAQ,CACN,GAAM,8CADR,8CAGA,uFAAsE,0BAAYA,WAAW,KAAvB,aAAtE,SAAqI,0BAAYA,WAAW,KAAvB,kBAArI,aAA6M,0BAAYA,WAAW,KAAvB,cAA7M,eACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAEW,0BAAYA,WAAW,MAAvB,MAFX,IAE+D,0BAAYA,WAAW,MAAvB,OAF/D,gDAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0HAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,qCAEyC,0BAAYA,WAAW,MAAvB,UAFzC,oCAEiI,0BAAYA,WAAW,MAAvB,gBAIvI,iBAAQ,CACN,GAAM,eADR,eAGA,8CAA6B,0BAAYA,WAAW,KAAvB,UAA7B,uDACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8rCAAytCC,QAAS,CACnwCL,QACAH,kBACAS,SACAC,UACAC,WACAC,WACAC,gBACCT,QAAQ,cACb,YAAC,IAAD,CAAMA,QAAQ,QACR,uBAEN,0CAIA,YAAC,IAAD,CAAQU,GAAG,gBAAgBC,OAAQ,CAAC,UAAW,QAASC,cAAY,EAACC,eAAgB,SAAAC,GAC3E,MAAc,YAAVA,EACK,CAAC,aACR,oCAIK,CAAC,gBAAiB,eACxBd,QAAQ,UACjB,sBAAQe,UAAQ,EAACD,MAAM,IAAvB,oCAGA,sBAAQA,MAAM,WAAd,WACA,sBAAQA,MAAM,QAAd,UAKI,uBAEN,mCAIA,YAAC,IAAD,CAAOJ,GAAG,UAAUM,KAAK,OAAOhB,QAAQ,WAIlC,uBAEN,gCAIA,YAAC,IAAD,CAAOU,GAAG,OAAOM,KAAK,WAAWC,KAAK,IAAIC,KAAK,KAAKlB,QAAQ,WAItD,uBAEN,YAAC,IAAD,CAAQU,GAAG,SAASM,KAAK,SAASG,QAAS,SAAAC,GACjCC,MAAMC,KAAKC,UAAUH,EAAO,KAAM,IAClCC,MAAM,8CACNG,QAAQC,IAAIL,IACXpB,QAAQ,UAJnB,c,sMAeFH,EAAW6B,gBAAiB","file":"component---docz-191-bind-input-fields-2-mdx-abcf3a5e002b5123e6c9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukas/Sites/git/own-packages/react-form-package/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Form, Field, Select, Button } from '../src';\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"bind-input-fields\"\n    }}>{`Bind Input Fields`}</h1>\n    <p>{`Sometimes it is not enough to bind the the value of an input field to just one single different input field. So you can also pass an array of ids to the `}<inlineCode parentName=\"p\">{`bindTo`}</inlineCode>{` prop. As we learned in the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-form-package/bind-input-fields\"\n      }}>{`Bind Input Fields`}</a>{` chapter, the `}<inlineCode parentName=\"p\">{`bindToCallback`}</inlineCode>{` is only triggered when the input field to which it is bound was not touched (blurred) yet. This sometimes has a problematic effect, e.g. if you have a select input to choose a email template, but everytime the user switches the select option, the template should be switched, even if the user touched one of the fields it was bound to. This can be achieved if you set a property called `}<inlineCode parentName=\"p\">{`bindToAlways`}</inlineCode>{`. If you return a single value from the `}<inlineCode parentName=\"p\">{`bindToCallback`}</inlineCode>{` every bound field will be populated with this value. If you want to have different values for each binding thn you can return an array of values. The binding will be in the same order as the order of the `}<inlineCode parentName=\"p\">{`bindTo`}</inlineCode>{` array. If the length of the array of the return value of the `}<inlineCode parentName=\"p\">{`bindToCallback`}</inlineCode>{` does not match the length of the `}<inlineCode parentName=\"p\">{`bindTo`}</inlineCode>{` ids, only the fields with an return value will be populated.`}</p>\n    <h2 {...{\n      \"id\": \"bind-an-input-value-to-another-input-value\"\n    }}>{`Bind an input value to another input value`}</h2>\n    <p>{`To handle such cases there are two properties available on the `}<inlineCode parentName=\"p\">{`<Field />`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`<RadioGroup />`}</inlineCode>{`, and the `}<inlineCode parentName=\"p\">{`<Select />`}</inlineCode>{` component.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bindTo`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String, Array`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the `}<inlineCode parentName=\"td\">{`id`}</inlineCode>{`/`}<inlineCode parentName=\"td\">{`ids`}</inlineCode>{` of the field/fields you want to manipulate`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bindToAlways`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`only needed if you want that the bindToCallback is triggered even the bound input field was already touched (blurred)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bindToCallback`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Func`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the callback to set the target's (`}<inlineCode parentName=\"td\">{`bindTo`}</inlineCode>{`) input value, which gets called `}<inlineCode parentName=\"td\">{`onChange`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h3>\n    <p>{`In our example we use `}<inlineCode parentName=\"p\">{`Select`}</inlineCode>{` input to choose between different email templates.`}</p>\n    <Playground __position={0} __code={'<Form>\\n  <div>\\n    <div>Email Template:</div>\\n\\n    <Select\\n      id=\\\"emailTemplate\\\"\\n      bindTo={[\\'subject\\', \\'body\\']}\\n      bindToAlways\\n      bindToCallback={value => {\\n        if (value === \\'friends\\') {\\n          return [\\n            \\\"What\\'s up?\\\", // subject as it appears first in the `bindTo` prop\\n            \\'Just take a look at this meme...\\', // body as it appears second in the `bindTo` prop\\n          ]\\n        }\\n\\n        return [\\'Weekly report\\', \\'Dear Boss,\\']\\n      }}\\n    >\\n      <option disabled value=\\\"\\\">\\n        --- Select an email template ---\\n      </option>\\n      <option value=\\\"friends\\\">Friends</option>\\n      <option value=\\\"boss\\\">Boss</option>\\n    </Select>\\n  </div>\\n\\n  <div>\\n    <div>Subject:</div>\\n\\n    <Field id=\\\"subject\\\" type=\\\"text\\\" />\\n  </div>\\n\\n  <div>\\n    <div>Body:</div>\\n\\n    <Field id=\\\"body\\\" type=\\\"textarea\\\" rows=\\\"5\\\" cols=\\\"40\\\" />\\n  </div>\\n\\n  <div>\\n    <Button\\n      id=\\\"submit\\\"\\n      type=\\\"submit\\\"\\n      onClick={state => {\\n        alert(JSON.stringify(state, null, 2))\\n        alert(\\'open the console to see the whole state...\\')\\n        console.log(state)\\n      }}\\n    >\\n      Submit\\n    </Button>\\n  </div>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Form,\n      Field,\n      Select,\n      Button,\n      Playground\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n        <div>\n\n  <div>\n    Email Template:\n  </div>\n\n  <Select id=\"emailTemplate\" bindTo={['subject', 'body']} bindToAlways bindToCallback={value => {\n            if (value === 'friends') {\n              return ['What\\'s up?', // subject as it appears first in the `bindTo` prop\n              'Just take a look at this meme...' // body as it appears second in the `bindTo` prop\n              ];\n            }\n\n            return ['Weekly report', 'Dear Boss,'];\n          }} mdxType=\"Select\">\n    <option disabled value=\"\">\n      --- Select an email template ---\n    </option>\n    <option value=\"friends\">Friends</option>\n    <option value=\"boss\">Boss</option>\n  </Select>\n\n        </div>\n\n        <div>\n\n  <div>\n    Subject:\n  </div>\n\n  <Field id=\"subject\" type=\"text\" mdxType=\"Field\" />\n\n        </div>\n\n        <div>\n\n  <div>\n    Body:\n  </div>\n\n  <Field id=\"body\" type=\"textarea\" rows=\"5\" cols=\"40\" mdxType=\"Field\" />\n\n        </div>\n\n        <div>\n\n  <Button id=\"submit\" type=\"submit\" onClick={state => {\n            alert(JSON.stringify(state, null, 2));\n            alert('open the console to see the whole state...');\n            console.log(state);\n          }} mdxType=\"Button\">\n    Submit\n  </Button>\n\n        </div>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}