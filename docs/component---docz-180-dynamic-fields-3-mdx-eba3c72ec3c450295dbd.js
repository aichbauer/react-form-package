(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{"2GzA":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return d})),t.d(n,"default",(function(){return m}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("mXGw");var i=t("/FXl"),a=t("TjRS"),o=t("oXiK"),l=t("ZFoC"),r=t("CKiP");t("aD51");function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}var d={};void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docz/180.dynamicFields3.mdx"}});var c={_frontmatter:d},p=a.a;function m(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(i.b)(p,s({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"dynamic-fields"},"Dynamic Fields"),Object(i.b)("p",null,"When you have a part of your form that consists of multiple fields that needs to be dynamic, e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"streetname")," and ",Object(i.b)("inlineCode",{parentName:"p"},"housenumber"),". >ou can add multiple fields to the state of the ",Object(i.b)("inlineCode",{parentName:"p"},"<Form />")," component by simle passing an array of objects to the ",Object(i.b)("inlineCode",{parentName:"p"},"field")," property instead of a single object. The same way you can remove multiple fields from state of the ",Object(i.b)("inlineCode",{parentName:"p"},"<Form />")," component, by passing an array of strings to the ",Object(i.b)("inlineCode",{parentName:"p"},"fieldId")," property instead of a single string."),Object(i.b)("h2",{id:"add-multiple-dynamic-fields-to-the-state"},"Add multiple dynamic fields to the state"),Object(i.b)("p",null,"First off, import your components."),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport {\n  Form,\n  Field,\n  Button,\n} from 'react-form-package';\n")),Object(i.b)("p",null,"Now create your component:"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{className:"language-jsx"}),'class MultipleDynamicFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      companies: [\n        {\n          id: \'street-0\',\n        },\n      ],\n    };\n\n    this.addField = this.addField.bind(this);\n    this.removeField = this.removeField.bind(this);\n    this.calculateAvailableId = this.calculateAvailableId.bind(this);\n  }\n\n  calculateAvailableId() {\n    const {\n      companies,\n    } = this.state;\n\n    const arr = companies.map((item) => parseInt(item.id.split(\'-\')[1], 10));\n\n    let currentHighestId = Math.max(...arr);\n    currentHighestId = currentHighestId !== -Infinity ? currentHighestId : 0;\n\n    const highestAvailableId = currentHighestId + 1;\n\n    return highestAvailableId;\n  }\n\n  addField() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    this.setState({\n      companies: companies.concat({ id: `street-${highestAvailableId}` }),\n    });\n  }\n\n  removeField(idx) {\n    const {\n      companies,\n    } = this.state;\n\n    this.setState({\n      companies: companies.filter((_, index) => idx !== index),\n    });\n  }\n\n  render() {\n    const {\n      companies,\n    } = this.state;\n\n    const highestAvailableId = this.calculateAvailableId();\n\n    return (\n      <Form\n        validate\n      >\n        {companies.map((street, idx) => (\n          <div>\n            <div>\n              <Field\n                id={`${street.id}`}\n                placeholder="Street name"\n                type="text"\n                required\n              />\n            </div>\n            <div>\n              <Field\n                id={`housenumber-${street.id.split(\'-\')[1]}`}\n                placeholder="House number"\n                type="number"\n                required\n              />\n            </div>\n            <Button\n              id="removeField"\n              rfpRole="removeField"\n              type="button"\n              // pass multiple fieldIds \n              // in an array to the \n              // fieldId\n              fieldId={[\n                `${street.id}`,\n                `housenumber-${street.id.split(\'-\')[1]}`,\n              ]}\n              onClick={() => this.removeField(idx)}\n            >\n              Remove Company\n            </Button>\n          </div>\n        ))}\n        <div>\n          <Button\n            id="addField"\n            rfpRole="addField"\n            type="button"\n            // pass multiple field objects \n            // in an array to the \n            // field property\n            field={[\n              {\n                id: `street-${highestAvailableId}`,\n                type: \'text\',\n                required: true,\n              },\n              {\n                id: `housenumber-${highestAvailableId}`,\n                type: \'number\',\n                required: true,\n              },\n            ]}\n            onClick={() => this.addField()}\n          >\n            Add Company Field\n          </Button>\n        </div>\n        <div>\n          <Button\n            id="submit"\n            type="submit"\n            onClick={(state) => {\n              alert(JSON.stringify(state, null, 2));\n              alert(\'open the console to see the whole state...\');\n              console.log(state);\n            }}\n          >\n            submit\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\nexport { MultipleDynamicFields };\n')),Object(i.b)("p",null,"Now lets render this component and see how you can add and remove multiple fields."),Object(i.b)(l.c,{__position:0,__code:"<MultipleDynamicFields />",__scope:{props:t,DefaultLayout:a.a,Form:o.d,Button:o.a,Field:o.b,Select:o.f,RadioGroup:o.e,Playground:l.c,MultipleDynamicFields:r.a},mdxType:"Playground"},Object(i.b)(r.a,{mdxType:"MultipleDynamicFields"})))}m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docz/180.dynamicFields3.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docz-180-dynamic-fields-3-mdx-eba3c72ec3c450295dbd.js.map